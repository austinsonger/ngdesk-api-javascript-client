/**
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ticket', 'model/TicketMessage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Ticket'), require('../model/TicketMessage'));
  } else {
    // Browser globals (root is window)
    if (!root.NgDeskOperations) {
      root.NgDeskOperations = {};
    }
    root.NgDeskOperations.DefaultApi = factory(root.NgDeskOperations.ApiClient, root.NgDeskOperations.Ticket, root.NgDeskOperations.TicketMessage);
  }
}(this, function(ApiClient, Ticket, TicketMessage) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 2.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTicket operation.
     * @callback module:api/DefaultApi~getTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrievs a ticket
     * @param {String} ticketId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authenticationToken 
     * @param {String} opts.category 
     * @param {String} opts.statuses 
     * @param {String} opts.orderedColumn 
     * @param {String} opts.orderedBy 
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {module:api/DefaultApi~getTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.getTicket = function(ticketId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling getTicket");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken'],
        'category': opts['category'],
        'statuses': opts['statuses'],
        'ordered_column': opts['orderedColumn'],
        'ordered_by': opts['orderedBy'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTickets operation.
     * @callback module:api/DefaultApi~getTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tickets
     * @param {Object} opts Optional parameters
     * @param {Number} opts.authenticationToken User athentication uuid
     * @param {Number} opts.start Start query value
     * @param {Number} opts.length Number of rows query
     * @param {Number} opts.draw Number of times table has been reloaded
     * @param {String} opts.q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES
     * @param {String} opts.sortBy Column name to order table by
     * @param {String} opts.sortByOrder Sort by ascending or descending
     * @param {String} opts.passedAccountId 
     * @param {String} opts.passedUserId 
     * @param {Number} opts.viewId View Id
     * @param {String} opts.clientId API ID
     * @param {String} opts.clientSecret API Secret
     * @param {module:api/DefaultApi~getTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.getTickets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken'],
        'start': opts['start'],
        'length': opts['length'],
        'draw': opts['draw'],
        'q': opts['q'],
        'sort_by': opts['sortBy'],
        'sort_by_order': opts['sortByOrder'],
        'passed_account_id': opts['passedAccountId'],
        'passed_user_id': opts['passedUserId'],
        'view_id': opts['viewId'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postMessages operation.
     * @callback module:api/DefaultApi~postMessagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a messages
     * @param {module:model/Ticket} body The request body for the operation
     * @param {String} ticketId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authenticationToken User athentication
     * @param {String} opts.clientId api client
     * @param {String} opts.clientSecret api secret
     * @param {module:api/DefaultApi~postMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postMessages = function(body, ticketId, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMessages");
      }

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling postMessages");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTickets operation.
     * @callback module:api/DefaultApi~postTicketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a tickets
     * @param {Array.<module:model/TicketMessage>} body The request body for the operation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.authenticationToken User athentication uuid
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {module:api/DefaultApi~postTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.postTickets = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTickets");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTickets operation.
     * @callback module:api/DefaultApi~putTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tickets
     * @param {Array.<module:model/Ticket>} body The request body for the operation
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticationToken User athentication uuid
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {module:api/DefaultApi~putTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.putTickets = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTickets");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/tickets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
