/**
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NgDeskOperations);
  }
}(this, function(expect, NgDeskOperations) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NgDeskOperations.TicketMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TicketMessage', function() {
    it('should create an instance of TicketMessage', function() {
      // uncomment below and update the code to test TicketMessage
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be.a(NgDeskOperations.TicketMessage);
    });

    it('should have the property TICKET_MESSAGE_ID (base name: "TICKET_MESSAGE_ID")', function() {
      // uncomment below and update the code to test the property TICKET_MESSAGE_ID
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property TICKET_ID (base name: "TICKET_ID")', function() {
      // uncomment below and update the code to test the property TICKET_ID
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property BODY (base name: "BODY")', function() {
      // uncomment below and update the code to test the property BODY
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property USER_ID (base name: "USER_ID")', function() {
      // uncomment below and update the code to test the property USER_ID
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property DATE_CREATED (base name: "DATE_CREATED")', function() {
      // uncomment below and update the code to test the property DATE_CREATED
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property COMPANY_ID (base name: "COMPANY_ID")', function() {
      // uncomment below and update the code to test the property COMPANY_ID
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property TICKET_ATTACHMENTS (base name: "TICKET_ATTACHMENTS")', function() {
      // uncomment below and update the code to test the property TICKET_ATTACHMENTS
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

    it('should have the property element1 (base name: "element1")', function() {
      // uncomment below and update the code to test the property element1
      //var instane = new NgDeskOperations.TicketMessage();
      //expect(instance).to.be();
    });

  });

}));
